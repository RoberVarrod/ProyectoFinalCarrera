@using Microsoft.AspNetCore.Http
@{
    ViewData["Title"] = "Gestión de Transportes";
    Layout = "~/Views/Shared/_LayoutTransportistas.cshtml";

    var usuarioNombre = Context.Session.GetString("UsuarioNombre");
    var idRol = Context.Session.GetString("UsuarioRol");
    var usuarioId = Context.Session.GetString("UsuarioId");
    var sesionActiva = !string.IsNullOrEmpty(usuarioNombre);
}

@if (idRol == "3")
{

    <!-- Header Start -->
    <div class="jumbotron jumbotron-fluid mb-5">
        <div class="container text-center py-5">
            <h1 class="text-white display-3 mb-5">Gestión de envíos y rutas</h1>
        </div>
    </div>

    <!-- Buscar Mejores Rutas Start -->
    <div class="container-fluid py-4">
        <h4 class="mb-4 text-primary">Buscar Mejores Rutas</h4>

        <!-- Formulario para ingresar origen y destino -->
        <form id="routesForm">
            <div class="form-group">
                <label for="origin">Punto de inicio:</label>
                <input type="text" class="form-control" id="origin" name="origin" placeholder="Ejemplo: San José, Costa Rica" required>
            </div>
            <div class="form-group">
                <label for="destination">Destino:</label>
                <input type="text" class="form-control" id="destination" name="destination" placeholder="Ejemplo: Limón, Costa Rica" required>
            </div>
            <button id="boton_Buscar" type="submit" class="btn btn-primary">Obtener Ruta</button>
        </form>
        <button id="boton_Refresh" class="btn btn-primary" style="display: none" onclick="location.reload()">Buscar una Ruta nueva</button>
        <hr />
        <div>
            <div class="form-group">
                <label for="kilometros">Distancia en kilómetros</label>
                <input type="text" class="form-control" id="kilometros" name="kilometros" placeholder="Km" required>
            </div>
            <div class="form-group">
                <label for="horas">Horas</label>
                <input type="text" class="form-control" id="horas" name="horas" placeholder="Horas" required>
            </div>
            <div class="form-group">
                <label for="minutos">Minutos</label>
                <input type="text" class="form-control" id="minutos" name="minutos" placeholder="Minutos" required>
            </div>
        </div>
        <hr />
        <!-- Contenedor para el mapa -->
        <div id="map" style="height: 500px; width: 100%; margin-top: 20px;"></div>

        <!-- Script para inicializar el mapa, manejar la API de Routes y agregar autocompletado -->
        <script>
            let map;
            let directionsRenderer;
            let autocompleteOrigin;
            let autocompleteDestination;

            // Función para inicializar el mapa
            function initMap() {
                // Centrar el mapa en Costa Rica
                map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: 9.7489, lng: -83.7534 }, // Coordenadas de Costa Rica
                    zoom: 8,
                });

                // Inicializar el renderizador de direcciones
                directionsRenderer = new google.maps.DirectionsRenderer();
                directionsRenderer.setMap(map);

                // Inicializar el autocompletado para el campo de origen
                autocompleteOrigin = new google.maps.places.Autocomplete(
                    document.getElementById("origin"),
                    {
                        // types: ["geocode"], // Limita los resultados a direcciones geográficas
                    }
                );

                // Inicializar el autocompletado para el campo de destino
                autocompleteDestination = new google.maps.places.Autocomplete(
                    document.getElementById("destination"),
                    {
                        // types: ["geocode"], // Limita los resultados a direcciones geográficas
                    }
                );
            }

            // var origin = document.getElementById("origin");
            // var destination = document.getElementById("destination");

            // Función para calcular y mostrar la ruta usando la API de Routes
            async function calculateAndDisplayRoute() {
                const apiKey = "AIzaSyDC8ZJMw9pqASh8A6OkkUdB3vvXFCB5H4A"; // Reemplaza con tu clave de API
                const requestUrl = `https://routes.googleapis.com/directions/v2:computeRoutes?key=${apiKey}`;

                var origin = document.getElementById("origin").value;
                var destination = document.getElementById("destination").value;

                const requestBody = {
                    origin: { address: origin },
                    destination: { address: destination },
                    travelMode: "DRIVE",
                    // X-Goog-FieldMask: *
                    routingPreference: "TRAFFIC_AWARE_OPTIMAL"


                };

                try {
                    const response = await fetch(requestUrl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "X-Goog-FieldMask": "routes"

                        },
                        body: JSON.stringify(requestBody),
                    });

                    //  if (!response.ok) {
                    //     throw new Error("Error al calcular la ruta");
                    //  }
                    if (!response.ok) {

                        const errorData = await response.json();

                        console.error("Respuesta con error:", errorData);

                        throw new Error("Error al calcular la ruta respuesta mala: " + (errorData.error?.message || "Desconocido"));

                    }



                    const data = await response.json();


                    //obtener detalles de la ruta
                    var routeDetailsDistanceMeters = data.routes[0].distanceMeters;
                    var routeDetailsDistanceKMeters = routeDetailsDistanceMeters / 1000;

                    var routeDetailsDurationS = (data.routes[0].duration).replaceAll("s", "");
                    var routeDetailsDurationM = routeDetailsDurationS / 60;

                    var routeDetailsDurationH = routeDetailsDurationS / 3600;



                    var inputKilometros = document.getElementById("kilometros");
                    inputKilometros.value = routeDetailsDistanceKMeters.toFixed(2);

                    var inputHoras = document.getElementById("horas");
                    inputHoras.value = routeDetailsDurationH.toFixed(2);

                    var inputMinutos = document.getElementById("minutos");
                    inputMinutos.value = routeDetailsDurationM.toFixed(2);


                    //alert("La mejor ruta tomando en cuenta el tráfico tiene una distancia de: " + routeDetailsDistanceKMeters.toFixed(2) + "Km" + "\n" + "y una duración de: " + routeDetailsDurationM.toFixed(2) + " minutos" + "\n" + "lo que equivale a un total de: " + routeDetailsDurationH.toFixed(2) + " Horas");


                    // Dibujar la ruta en el mapa
                    const route = data.routes[0];
                    const path = route.polyline.encodedPolyline;
                    const decodedPath = google.maps.geometry.encoding.decodePath(path);

                    const routePath = new google.maps.Polyline({
                        path: decodedPath,
                        geodesic: true,
                        strokeColor: "#FF0000",
                        strokeOpacity: 1.0,
                        strokeWeight: 2,
                    });

                    routePath.setMap(map);




                    // Ajustar el mapa para que se vea toda la ruta
                    const bounds = new google.maps.LatLngBounds();
                    decodedPath.forEach((point) => bounds.extend(point));
                    map.fitBounds(bounds);

                } catch (error) {
                    alert("Error al calcular la ruta: " + error.message);
                }

            }

            // Manejar el envío del formulario
            document.getElementById("routesForm").addEventListener("submit", async (event) => {
                event.preventDefault();

                const buscarButton = document.getElementById("boton_Buscar");
                buscarButton.style.display = 'none'; // ocultar boton buscar.

                const refreshButton = document.getElementById("boton_Refresh");
                refreshButton.style.display = 'block'; // mostrar boton refresh.

                const origin = document.getElementById("origin").value;
                const destination = document.getElementById("destination").value;





                // Calcular y mostrar la ruta
                calculateAndDisplayRoute(origin, destination);
            });

            // Cargar la API de Google Maps con la biblioteca de Places
            function loadGoogleMapsScript() {
                const script = document.createElement("script");
                script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDC8ZJMw9pqASh8A6OkkUdB3vvXFCB5H4A&callback=initMap&libraries=places,geometry`;
                script.defer = true;
                document.head.appendChild(script);
            }

            // Cargar el script de Google Maps al cargar la página
            window.onload = loadGoogleMapsScript;


        </script>
    </div>

}
else
{
    <div class="jumbotron jumbotron-fluid mb-5">
        <div class="container text-center py-5">
            <h1 class="text-white display-3 mb-5">No tienes acceso</h1>
            <div class="mx-auto" style="width: 100%; max-width: 600px;">
                <div class="input-group d-flex justify-content-center">
                    <img src="~/assets/img/no-autorizado.png" />
                </div>
            </div>
        </div>
    </div>

}